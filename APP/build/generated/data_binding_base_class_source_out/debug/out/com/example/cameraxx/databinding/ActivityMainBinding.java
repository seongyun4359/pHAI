// Generated by view binder compiler. Do not edit!
package com.example.cameraxx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.camera.view.PreviewView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cameraxx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button continuousCaptureButton;

  @NonNull
  public final View darkOverlayBottom;

  @NonNull
  public final View darkOverlayLeft;

  @NonNull
  public final View darkOverlayRight;

  @NonNull
  public final View darkOverlayTop;

  @NonNull
  public final View horizontalLine;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final TextView photoCountTextView;

  @NonNull
  public final TextView timerTextView;

  @NonNull
  public final View transparentRectangle;

  @NonNull
  public final Guideline verticalCenterline;

  @NonNull
  public final View verticalLine;

  @NonNull
  public final PreviewView viewFinder;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button continuousCaptureButton, @NonNull View darkOverlayBottom,
      @NonNull View darkOverlayLeft, @NonNull View darkOverlayRight, @NonNull View darkOverlayTop,
      @NonNull View horizontalLine, @NonNull ConstraintLayout main,
      @NonNull TextView photoCountTextView, @NonNull TextView timerTextView,
      @NonNull View transparentRectangle, @NonNull Guideline verticalCenterline,
      @NonNull View verticalLine, @NonNull PreviewView viewFinder) {
    this.rootView = rootView;
    this.continuousCaptureButton = continuousCaptureButton;
    this.darkOverlayBottom = darkOverlayBottom;
    this.darkOverlayLeft = darkOverlayLeft;
    this.darkOverlayRight = darkOverlayRight;
    this.darkOverlayTop = darkOverlayTop;
    this.horizontalLine = horizontalLine;
    this.main = main;
    this.photoCountTextView = photoCountTextView;
    this.timerTextView = timerTextView;
    this.transparentRectangle = transparentRectangle;
    this.verticalCenterline = verticalCenterline;
    this.verticalLine = verticalLine;
    this.viewFinder = viewFinder;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.continuousCaptureButton;
      Button continuousCaptureButton = ViewBindings.findChildViewById(rootView, id);
      if (continuousCaptureButton == null) {
        break missingId;
      }

      id = R.id.darkOverlayBottom;
      View darkOverlayBottom = ViewBindings.findChildViewById(rootView, id);
      if (darkOverlayBottom == null) {
        break missingId;
      }

      id = R.id.darkOverlayLeft;
      View darkOverlayLeft = ViewBindings.findChildViewById(rootView, id);
      if (darkOverlayLeft == null) {
        break missingId;
      }

      id = R.id.darkOverlayRight;
      View darkOverlayRight = ViewBindings.findChildViewById(rootView, id);
      if (darkOverlayRight == null) {
        break missingId;
      }

      id = R.id.darkOverlayTop;
      View darkOverlayTop = ViewBindings.findChildViewById(rootView, id);
      if (darkOverlayTop == null) {
        break missingId;
      }

      id = R.id.horizontalLine;
      View horizontalLine = ViewBindings.findChildViewById(rootView, id);
      if (horizontalLine == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.photoCountTextView;
      TextView photoCountTextView = ViewBindings.findChildViewById(rootView, id);
      if (photoCountTextView == null) {
        break missingId;
      }

      id = R.id.timerTextView;
      TextView timerTextView = ViewBindings.findChildViewById(rootView, id);
      if (timerTextView == null) {
        break missingId;
      }

      id = R.id.transparentRectangle;
      View transparentRectangle = ViewBindings.findChildViewById(rootView, id);
      if (transparentRectangle == null) {
        break missingId;
      }

      id = R.id.vertical_centerline;
      Guideline verticalCenterline = ViewBindings.findChildViewById(rootView, id);
      if (verticalCenterline == null) {
        break missingId;
      }

      id = R.id.verticalLine;
      View verticalLine = ViewBindings.findChildViewById(rootView, id);
      if (verticalLine == null) {
        break missingId;
      }

      id = R.id.viewFinder;
      PreviewView viewFinder = ViewBindings.findChildViewById(rootView, id);
      if (viewFinder == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, continuousCaptureButton,
          darkOverlayBottom, darkOverlayLeft, darkOverlayRight, darkOverlayTop, horizontalLine,
          main, photoCountTextView, timerTextView, transparentRectangle, verticalCenterline,
          verticalLine, viewFinder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
